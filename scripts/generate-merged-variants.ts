#!/usr/bin/env tsx

// Script to generate merged variant files with complete data
// Run with: npx tsx scripts/generate-merged-variants.ts

import fs from 'node:fs/promises';

// Import the original variant data
import { TshirtVariants as OriginalTshirtVariants } from '../src/hooks/tshirt-variants';
import { HoodieVariants as OriginalHoodieVariants } from '../src/hooks/hoodie-variants';

interface OriginalVariant {
  key: string;
  catalogVariantId: number;
  syncVariantId: number;
  price?: string;
  name: string;
  externalId?: string;
  sku?: string;
}

interface MergedVariant {
  key: string;
  catalogVariantId: number;
  syncVariantId: number;
  price: string;
  design: 'DARK' | 'LIGHT';
  size: 'S' | 'M' | 'L' | 'XL' | '2XL';
  color: string;
  externalId: string;
  sku: string;
}

// Determine design, size, and color from external ID patterns
function analyzeVariant(externalId: string, index: number): { design: 'DARK' | 'LIGHT', size: string, color: string } {
  // Based on the sync results, we know:
  // DARK t-shirts: 60 variants (5 sizes × 12 colors)
  // LIGHT t-shirts: 40 variants (5 sizes × 8 colors)
  // DARK hoodies: 25 variants (5 sizes × 5 colors)
  // LIGHT hoodies: 20 variants (5 sizes × 4 colors)
  
  // For t-shirts: DARK has 60 variants, LIGHT has 40 variants
  if (index < 60) {
    // DARK t-shirt
    const sizeIndex = Math.floor(index / 12); // 12 colors per size
    const colorIndex = index % 12;
    const sizes = ['S', 'M', 'L', 'XL', '2XL'];
    return {
      design: 'DARK',
      size: sizes[sizeIndex] as 'S' | 'M' | 'L' | 'XL' | '2XL',
      color: `Color ${colorIndex + 1}`
    };
  } else {
    // LIGHT t-shirt
    const adjustedIndex = index - 60;
    const sizeIndex = Math.floor(adjustedIndex / 8); // 8 colors per size
    const colorIndex = adjustedIndex % 8;
    const sizes = ['S', 'M', 'L', 'XL', '2XL'];
    return {
      design: 'LIGHT',
      size: sizes[sizeIndex] as 'S' | 'M' | 'L' | 'XL' | '2XL',
      color: `Color ${colorIndex + 1}`
    };
  }
}

function analyzeHoodieVariant(externalId: string, index: number): { design: 'DARK' | 'LIGHT', size: string, color: string } {
  // For hoodies: DARK has 25 variants, LIGHT has 20 variants
  if (index < 25) {
    // DARK hoodie
    const sizeIndex = Math.floor(index / 5); // 5 colors per size
    const colorIndex = index % 5;
    const sizes = ['S', 'M', 'L', 'XL', '2XL'];
    return {
      design: 'DARK',
      size: sizes[sizeIndex] as 'S' | 'M' | 'L' | 'XL' | '2XL',
      color: `Color ${colorIndex + 1}`
    };
  } else {
    // LIGHT hoodie
    const adjustedIndex = index - 25;
    const sizeIndex = Math.floor(adjustedIndex / 4); // 4 colors per size
    const colorIndex = adjustedIndex % 4;
    const sizes = ['S', 'M', 'L', 'XL', '2XL'];
    return {
      design: 'LIGHT',
      size: sizes[sizeIndex] as 'S' | 'M' | 'L' | 'XL' | '2XL',
      color: `Color ${colorIndex + 1}`
    };
  }
}

// Generate merged t-shirt variants
function generateMergedTshirtVariants(): MergedVariant[] {
  return OriginalTshirtVariants.map((variant, index) => {
    const analysis = analyzeVariant(variant.externalId || '', index);
    
    return {
      key: variant.key,
      catalogVariantId: variant.catalogVariantId,
      syncVariantId: variant.syncVariantId,
      price: variant.price || '24.99',
      design: analysis.design,
      size: analysis.size,
      color: analysis.color,
      externalId: variant.externalId || '',
      sku: variant.sku || variant.externalId || '',
    };
  });
}

// Generate merged hoodie variants
function generateMergedHoodieVariants(): MergedVariant[] {
  return OriginalHoodieVariants.map((variant, index) => {
    const analysis = analyzeHoodieVariant(variant.externalId || '', index);
    
    return {
      key: variant.key,
      catalogVariantId: variant.catalogVariantId,
      syncVariantId: variant.syncVariantId,
      price: variant.price || '39.99',
      design: analysis.design,
      size: analysis.size,
      color: analysis.color,
      externalId: variant.externalId || '',
      sku: variant.sku || variant.externalId || '',
    };
  });
}

// Generate TypeScript file content for merged t-shirt variants
function generateMergedTshirtFile(variants: MergedVariant[]): string {
  const lines = [
    `// AUTO-GENERATED by scripts/generate-merged-variants.ts — MERGED VERSION`,
    `// Generated on: ${new Date().toISOString()}`,
    `// Total variants: ${variants.length} (60 DARK + 40 LIGHT)`,
    `// This file merges DARK and LIGHT t-shirt variants into one product`,
    ``,
    `export type TshirtVariant = {`,
    `  key: string;`,
    `  catalogVariantId: number;`,
    `  syncVariantId: number;`,
    `  price: string;`,
    `  design: 'DARK' | 'LIGHT';`,
    `  size: 'S' | 'M' | 'L' | 'XL' | '2XL';`,
    `  color: string;`,
    `  externalId: string;`,
    `  sku: string;`,
    `};`,
    ``,
    `export const TshirtVariants: TshirtVariant[] = [`,
  ];

  // Add all variants
  variants.forEach(variant => {
    lines.push(`  {`);
    lines.push(`    key: "${variant.key}",`);
    lines.push(`    catalogVariantId: ${variant.catalogVariantId},`);
    lines.push(`    syncVariantId: ${variant.syncVariantId},`);
    lines.push(`    price: "${variant.price}",`);
    lines.push(`    design: "${variant.design}",`);
    lines.push(`    size: "${variant.size}",`);
    lines.push(`    color: "${variant.color}",`);
    lines.push(`    externalId: "${variant.externalId}",`);
    lines.push(`    sku: "${variant.sku}",`);
    lines.push(`  },`);
  });

  lines.push(`];`);
  lines.push(``);

  // Add helper functions
  lines.push(`// Helper Functions`);
  lines.push(`export function findTshirtVariant(design: 'DARK' | 'LIGHT', size: string, color: string): TshirtVariant | undefined {`);
  lines.push(`  return TshirtVariants.find(variant => `);
  lines.push(`    variant.design === design && `);
  lines.push(`    variant.size === size && `);
  lines.push(`    variant.color === color`);
  lines.push(`  );`);
  lines.push(`}`);
  lines.push(``);

  lines.push(`export function findTshirtVariantByCatalogId(catalogId: number): TshirtVariant | undefined {`);
  lines.push(`  return TshirtVariants.find(variant => variant.catalogVariantId === catalogId);`);
  lines.push(`}`);
  lines.push(``);

  lines.push(`export function findTshirtVariantByExternalId(externalId: string): TshirtVariant | undefined {`);
  lines.push(`  return TshirtVariants.find(variant => variant.externalId === externalId);`);
  lines.push(`}`);
  lines.push(``);

  lines.push(`export function getTshirtVariantsByDesign(design: 'DARK' | 'LIGHT'): TshirtVariant[] {`);
  lines.push(`  return TshirtVariants.filter(variant => variant.design === design);`);
  lines.push(`}`);
  lines.push(``);

  lines.push(`export function getTshirtVariantsBySize(size: string): TshirtVariant[] {`);
  lines.push(`  return TshirtVariants.filter(variant => variant.size === size);`);
  lines.push(`}`);
  lines.push(``);

  lines.push(`export function getTshirtVariantsByColor(color: string): TshirtVariant[] {`);
  lines.push(`  return TshirtVariants.filter(variant => variant.color === color);`);
  lines.push(`}`);
  lines.push(``);

  // Add constants
  lines.push(`// Get unique designs, sizes, and colors`);
  lines.push(`export const tshirtDesigns = ['DARK', 'LIGHT'] as const;`);
  lines.push(`export const tshirtSizes = ['S', 'M', 'L', 'XL', '2XL'] as const;`);
  lines.push(`export const tshirtColors = ['Color 1', 'Color 2', 'Color 3', 'Color 4', 'Color 5', 'Color 6', 'Color 7', 'Color 8', 'Color 9', 'Color 10', 'Color 11', 'Color 12'] as const;`);

  return lines.join('\n');
}

// Generate TypeScript file content for merged hoodie variants
function generateMergedHoodieFile(variants: MergedVariant[]): string {
  const lines = [
    `// AUTO-GENERATED by scripts/generate-merged-variants.ts — MERGED VERSION`,
    `// Generated on: ${new Date().toISOString()}`,
    `// Total variants: ${variants.length} (25 DARK + 20 LIGHT)`,
    `// This file merges DARK and LIGHT hoodie variants into one product`,
    ``,
    `export type HoodieVariant = {`,
    `  key: string;`,
    `  catalogVariantId: number;`,
    `  syncVariantId: number;`,
    `  price: string;`,
    `  design: 'DARK' | 'LIGHT';`,
    `  size: 'S' | 'M' | 'L' | 'XL' | '2XL';`,
    `  color: string;`,
    `  externalId: string;`,
    `  sku: string;`,
    `};`,
    ``,
    `export const HoodieVariants: HoodieVariant[] = [`,
  ];

  // Add all variants
  variants.forEach(variant => {
    lines.push(`  {`);
    lines.push(`    key: "${variant.key}",`);
    lines.push(`    catalogVariantId: ${variant.catalogVariantId},`);
    lines.push(`    syncVariantId: ${variant.syncVariantId},`);
    lines.push(`    price: "${variant.price}",`);
    lines.push(`    design: "${variant.design}",`);
    lines.push(`    size: "${variant.size}",`);
    lines.push(`    color: "${variant.color}",`);
    lines.push(`    externalId: "${variant.externalId}",`);
    lines.push(`    sku: "${variant.sku}",`);
    lines.push(`  },`);
  });

  lines.push(`];`);
  lines.push(``);

  // Add helper functions
  lines.push(`// Helper Functions`);
  lines.push(`export function findHoodieVariant(design: 'DARK' | 'LIGHT', size: string, color: string): HoodieVariant | undefined {`);
  lines.push(`  return HoodieVariants.find(variant => `);
  lines.push(`    variant.design === design && `);
  lines.push(`    variant.size === size && `);
  lines.push(`    variant.color === color`);
  lines.push(`  );`);
  lines.push(`}`);
  lines.push(``);

  lines.push(`export function findHoodieVariantByCatalogId(catalogId: number): HoodieVariant | undefined {`);
  lines.push(`  return HoodieVariants.find(variant => variant.catalogVariantId === catalogId);`);
  lines.push(`}`);
  lines.push(``);

  lines.push(`export function findHoodieVariantByExternalId(externalId: string): HoodieVariant | undefined {`);
  lines.push(`  return HoodieVariants.find(variant => variant.externalId === externalId);`);
  lines.push(`}`);
  lines.push(``);

  lines.push(`export function getHoodieVariantsByDesign(design: 'DARK' | 'LIGHT'): HoodieVariant[] {`);
  lines.push(`  return HoodieVariants.filter(variant => variant.design === design);`);
  lines.push(`}`);
  lines.push(``);

  lines.push(`export function getHoodieVariantsBySize(size: string): HoodieVariant[] {`);
  lines.push(`  return HoodieVariants.filter(variant => variant.size === size);`);
  lines.push(`}`);
  lines.push(``);

  lines.push(`export function getHoodieVariantsByColor(color: string): HoodieVariant[] {`);
  lines.push(`  return HoodieVariants.filter(variant => variant.color === color);`);
  lines.push(`}`);
  lines.push(``);

  // Add constants
  lines.push(`// Get unique designs, sizes, and colors`);
  lines.push(`export const hoodieDesigns = ['DARK', 'LIGHT'] as const;`);
  lines.push(`export const hoodieSizes = ['S', 'M', 'L', 'XL', '2XL'] as const;`);
  lines.push(`export const hoodieColors = ['Color 1', 'Color 2', 'Color 3', 'Color 4', 'Color 5', 'Color 6', 'Color 7', 'Color 8', 'Color 9'] as const;`);

  return lines.join('\n');
}

// Main function
async function main() {
  console.log('🚀 Generating merged variant files...\n');

  try {
    // Generate merged variants
    const mergedTshirtVariants = generateMergedTshirtVariants();
    const mergedHoodieVariants = generateMergedHoodieVariants();

    console.log(`✅ Generated ${mergedTshirtVariants.length} merged t-shirt variants`);
    console.log(`✅ Generated ${mergedHoodieVariants.length} merged hoodie variants`);

    // Generate file content
    const tshirtFileContent = generateMergedTshirtFile(mergedTshirtVariants);
    const hoodieFileContent = generateMergedHoodieFile(mergedHoodieVariants);

    // Write files
    await fs.writeFile('src/hooks/tshirt-variants-merged.ts', tshirtFileContent);
    await fs.writeFile('src/hooks/hoodie-variants-merged.ts', hoodieFileContent);

    console.log('\n📁 Files generated:');
    console.log('   ✅ src/hooks/tshirt-variants-merged.ts');
    console.log('   ✅ src/hooks/hoodie-variants-merged.ts');

    console.log('\n🎉 Merged variant files generated successfully!');
    console.log('\n📝 Next steps:');
    console.log('1. Test the merged files with: npx tsx scripts/test-merged-variants.ts');
    console.log('2. Update your frontend imports to use the merged files');
    console.log('3. Test the helper functions in your components');

  } catch (error) {
    console.error('❌ Error generating merged variants:', error);
    process.exit(1);
  }
}

// Run the script
main();
