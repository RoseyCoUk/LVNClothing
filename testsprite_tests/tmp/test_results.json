[
  {
    "projectId": "b4a357dc-64df-4802-856d-6ad12681bb73",
    "testId": "26903fe1-c44a-410b-8eeb-ab4673519299",
    "userId": "d4d834c8-20e1-70f7-159c-4253b7ea4f92",
    "title": "TC001-User Registration Success",
    "description": "Verify that a new user can successfully register with valid credentials and receives confirmation.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5173\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        assert False, 'Test failed: Expected result unknown, forcing failure.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "\nBrowser Console Logs:\n[WARNING] Allow attribute will take precedence over 'allowfullscreen'. (at http://localhost:5173/node_modules/.vite/deps/chunk-WRD5HZVH.js?v=ec87e069:1269:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/d4d834c8-20e1-70f7-159c-4253b7ea4f92/1756178512019101//tmp/test_task/result.webm",
    "created": "2025-08-26T03:19:41.887Z",
    "modified": "2025-08-26T03:21:52.177Z"
  },
  {
    "projectId": "b4a357dc-64df-4802-856d-6ad12681bb73",
    "testId": "9cf0b2e0-4e16-4881-96a8-d1e33e02fe6e",
    "userId": "d4d834c8-20e1-70f7-159c-4253b7ea4f92",
    "title": "TC002-User Registration Validation - Missing Fields",
    "description": "Verify that registration form validates required fields and prevents submission with missing data.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5173\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        assert False, 'Test failed: Expected validation errors not verified due to unknown expected result.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "\nBrowser Console Logs:\n[WARNING] Allow attribute will take precedence over 'allowfullscreen'. (at http://localhost:5173/node_modules/.vite/deps/chunk-WRD5HZVH.js?v=ec87e069:1269:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/d4d834c8-20e1-70f7-159c-4253b7ea4f92/1756178531673768//tmp/test_task/result.webm",
    "created": "2025-08-26T03:19:41.893Z",
    "modified": "2025-08-26T03:22:11.832Z"
  },
  {
    "projectId": "b4a357dc-64df-4802-856d-6ad12681bb73",
    "testId": "356c23da-38be-4719-a014-9c9732e9803d",
    "userId": "d4d834c8-20e1-70f7-159c-4253b7ea4f92",
    "title": "TC003-User Login Success",
    "description": "Check that existing users can log in successfully with valid email and password.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5173\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        assert False, 'Test plan execution failed: unable to verify login success due to unknown expected result.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "\nBrowser Console Logs:\n[WARNING] Allow attribute will take precedence over 'allowfullscreen'. (at http://localhost:5173/node_modules/.vite/deps/chunk-WRD5HZVH.js?v=ec87e069:1269:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/d4d834c8-20e1-70f7-159c-4253b7ea4f92/1756178525077039//tmp/test_task/result.webm",
    "created": "2025-08-26T03:19:41.900Z",
    "modified": "2025-08-26T03:22:05.241Z"
  },
  {
    "projectId": "b4a357dc-64df-4802-856d-6ad12681bb73",
    "testId": "68b84add-fb6c-43f4-83f7-3a8254ac8707",
    "userId": "d4d834c8-20e1-70f7-159c-4253b7ea4f92",
    "title": "TC004-User Login Failure - Incorrect Credentials",
    "description": "Verify the system rejects login attempts with incorrect email or password.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5173\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        assert False, 'Test failed: Expected error message not verified due to unknown expected result.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "\nBrowser Console Logs:\n[WARNING] Allow attribute will take precedence over 'allowfullscreen'. (at http://localhost:5173/node_modules/.vite/deps/chunk-WRD5HZVH.js?v=ec87e069:1269:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/d4d834c8-20e1-70f7-159c-4253b7ea4f92/1756178524115896//tmp/test_task/result.webm",
    "created": "2025-08-26T03:19:41.910Z",
    "modified": "2025-08-26T03:22:04.291Z"
  },
  {
    "projectId": "b4a357dc-64df-4802-856d-6ad12681bb73",
    "testId": "f6a398ce-8ee4-4f05-ad55-c38e8a69b0f8",
    "userId": "d4d834c8-20e1-70f7-159c-4253b7ea4f92",
    "title": "TC005-Password Reset Workflow",
    "description": "Ensure users can request a password reset and change their password securely.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5173\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        assert False, 'Test failed: Expected result unknown, forcing failure.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "\nBrowser Console Logs:\n[WARNING] Allow attribute will take precedence over 'allowfullscreen'. (at http://localhost:5173/node_modules/.vite/deps/chunk-WRD5HZVH.js?v=ec87e069:1269:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/d4d834c8-20e1-70f7-159c-4253b7ea4f92/1756178524542914//tmp/test_task/result.webm",
    "created": "2025-08-26T03:19:41.917Z",
    "modified": "2025-08-26T03:22:04.745Z"
  },
  {
    "projectId": "b4a357dc-64df-4802-856d-6ad12681bb73",
    "testId": "a6185e2c-5e59-4996-84e0-d100882cf4ad",
    "userId": "d4d834c8-20e1-70f7-159c-4253b7ea4f92",
    "title": "TC006-Product Catalog Display and Variant Selection",
    "description": "Verify that product catalog displays correct categories, product variants, pricing, and availability updated from Printful.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5173\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        assert False, 'Test plan execution failed: expected result unknown, generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "\nBrowser Console Logs:\n[WARNING] Allow attribute will take precedence over 'allowfullscreen'. (at http://localhost:5173/node_modules/.vite/deps/chunk-WRD5HZVH.js?v=ec87e069:1269:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/d4d834c8-20e1-70f7-159c-4253b7ea4f92/1756178527814029//tmp/test_task/result.webm",
    "created": "2025-08-26T03:19:41.925Z",
    "modified": "2025-08-26T03:22:07.994Z"
  },
  {
    "projectId": "b4a357dc-64df-4802-856d-6ad12681bb73",
    "testId": "e711d988-ea71-45fa-8204-cbc571cda458",
    "userId": "d4d834c8-20e1-70f7-159c-4253b7ea4f92",
    "title": "TC007-Add to Cart and Persistent Cart Functionality",
    "description": "Validate users can add products and variants to the cart and cart contents persist across sessions with real-time quantity updates.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5173\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        assert False, 'Test plan execution failed: expected result unknown, forcing failure.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "\nBrowser Console Logs:\n[WARNING] Allow attribute will take precedence over 'allowfullscreen'. (at http://localhost:5173/node_modules/.vite/deps/chunk-WRD5HZVH.js?v=ec87e069:1269:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/d4d834c8-20e1-70f7-159c-4253b7ea4f92/1756178518673118//tmp/test_task/result.webm",
    "created": "2025-08-26T03:19:41.933Z",
    "modified": "2025-08-26T03:21:58.890Z"
  },
  {
    "projectId": "b4a357dc-64df-4802-856d-6ad12681bb73",
    "testId": "c1bd45f7-3056-499a-9681-135f79ddf851",
    "userId": "d4d834c8-20e1-70f7-159c-4253b7ea4f92",
    "title": "TC008-Multi-step Checkout - Valid Input Flow",
    "description": "Verify the multi-step checkout which includes shipping address, shipping method selection, payment via Stripe, and order confirmation.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5173\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "\nBrowser Console Logs:\n[WARNING] Allow attribute will take precedence over 'allowfullscreen'. (at http://localhost:5173/node_modules/.vite/deps/chunk-WRD5HZVH.js?v=ec87e069:1269:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/d4d834c8-20e1-70f7-159c-4253b7ea4f92/1756178519621601//tmp/test_task/result.webm",
    "created": "2025-08-26T03:19:41.941Z",
    "modified": "2025-08-26T03:21:59.833Z"
  },
  {
    "projectId": "b4a357dc-64df-4802-856d-6ad12681bb73",
    "testId": "0256494a-d469-4f7c-a579-1533b3292bb3",
    "userId": "d4d834c8-20e1-70f7-159c-4253b7ea4f92",
    "title": "TC009-Multi-step Checkout - Input Validation Errors",
    "description": "Ensure the checkout process handles invalid or missing input data gracefully with appropriate error messages.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5173\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        assert False, 'Test failed: Expected validation errors did not appear or progression was not blocked.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "\nBrowser Console Logs:\n[WARNING] Allow attribute will take precedence over 'allowfullscreen'. (at http://localhost:5173/node_modules/.vite/deps/chunk-WRD5HZVH.js?v=ec87e069:1269:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/d4d834c8-20e1-70f7-159c-4253b7ea4f92/1756178519156811//tmp/test_task/result.webm",
    "created": "2025-08-26T03:19:41.948Z",
    "modified": "2025-08-26T03:21:59.308Z"
  },
  {
    "projectId": "b4a357dc-64df-4802-856d-6ad12681bb73",
    "testId": "e7af8428-fb62-4f86-b43c-6f171e697efe",
    "userId": "d4d834c8-20e1-70f7-159c-4253b7ea4f92",
    "title": "TC010-Printful Inventory Synchronization",
    "description": "Verify that product inventory and pricing update in real-time reflecting Printful API changes including bundle discounts.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5173\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        assert False, 'Test failed: Expected result unknown, forcing failure.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "\nBrowser Console Logs:\n[WARNING] Allow attribute will take precedence over 'allowfullscreen'. (at http://localhost:5173/node_modules/.vite/deps/chunk-WRD5HZVH.js?v=ec87e069:1269:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/d4d834c8-20e1-70f7-159c-4253b7ea4f92/175617852137322//tmp/test_task/result.webm",
    "created": "2025-08-26T03:19:41.956Z",
    "modified": "2025-08-26T03:22:01.583Z"
  },
  {
    "projectId": "b4a357dc-64df-4802-856d-6ad12681bb73",
    "testId": "70b69437-2ee1-4206-a436-51f87164bc11",
    "userId": "d4d834c8-20e1-70f7-159c-4253b7ea4f92",
    "title": "TC011-Order Management - Status Tracking and Cancellation",
    "description": "Verify order status updates throughout fulfillment, user can view order history and cancel orders where permitted.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5173\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "\nBrowser Console Logs:\n[WARNING] Allow attribute will take precedence over 'allowfullscreen'. (at http://localhost:5173/node_modules/.vite/deps/chunk-WRD5HZVH.js?v=ec87e069:1269:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/d4d834c8-20e1-70f7-159c-4253b7ea4f92/1756178521247634//tmp/test_task/result.webm",
    "created": "2025-08-26T03:19:41.963Z",
    "modified": "2025-08-26T03:22:01.516Z"
  },
  {
    "projectId": "b4a357dc-64df-4802-856d-6ad12681bb73",
    "testId": "ddea9bf5-1c87-4417-9ecc-6bf694ae5769",
    "userId": "d4d834c8-20e1-70f7-159c-4253b7ea4f92",
    "title": "TC012-Guest Checkout Flow",
    "description": "Validate guests can complete purchases without registration, with option to create an account post-purchase.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5173\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        assert False, 'Test failed: Expected result unknown, forcing failure.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "\nBrowser Console Logs:\n[WARNING] Allow attribute will take precedence over 'allowfullscreen'. (at http://localhost:5173/node_modules/.vite/deps/chunk-WRD5HZVH.js?v=ec87e069:1269:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5173/Cap/ReformCapBlue1.webp:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5173/StickerToteWater/ReformToteBagBlack1.webp:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/d4d834c8-20e1-70f7-159c-4253b7ea4f92/1756178518395564//tmp/test_task/result.webm",
    "created": "2025-08-26T03:19:41.970Z",
    "modified": "2025-08-26T03:21:58.618Z"
  },
  {
    "projectId": "b4a357dc-64df-4802-856d-6ad12681bb73",
    "testId": "1e31e0d9-2625-42f1-845f-6049e9646b30",
    "userId": "d4d834c8-20e1-70f7-159c-4253b7ea4f92",
    "title": "TC013-Security - GDPR Compliance and Data Encryption",
    "description": "Validate that user data is handled and stored in compliance with GDPR and all sensitive data is encrypted.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5173\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        assert False, 'Test plan execution failed: expected result unknown, forcing failure.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "\nBrowser Console Logs:\n[WARNING] Allow attribute will take precedence over 'allowfullscreen'. (at http://localhost:5173/node_modules/.vite/deps/chunk-WRD5HZVH.js?v=ec87e069:1269:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at https://nsmrxwnrtsllxvplazmm.supabase.co/rest/v1/products?select=*&order=name.asc:0:0)\n[ERROR] ❌ Failed to fetch products: {message: TypeError: Failed to fetch, details: TypeError: Failed to fetch\n    at http://localhost…deps/@supabase_supabase-js.js?v=ec87e069:4171:24), hint: , code: } (at http://localhost:5173/src/lib/api.ts?t=1756177230990:7:14)\n[ERROR] ❌ Error handled: {originalError: Object, reformError: Object} (at http://localhost:5173/src/lib/error-handler.ts:96:10)\n[ERROR] 🚨 Error logged: {error: Object, context: getProducts, additionalInfo: undefined, timestamp: 2025-08-26T03:21:12.382Z, url: http://localhost:5173/} (at http://localhost:5173/src/lib/error-handler.ts:115:10)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/d4d834c8-20e1-70f7-159c-4253b7ea4f92/1756178522887442//tmp/test_task/result.webm",
    "created": "2025-08-26T03:19:41.978Z",
    "modified": "2025-08-26T03:22:03.263Z"
  },
  {
    "projectId": "b4a357dc-64df-4802-856d-6ad12681bb73",
    "testId": "30dbd514-f9ca-419e-9053-58886a97396d",
    "userId": "d4d834c8-20e1-70f7-159c-4253b7ea4f92",
    "title": "TC014-Performance - Page Load Speed and Mobile Responsiveness",
    "description": "Ensure that pages load within 3 seconds for core user flows and the UI adapts correctly on mobile devices.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5173\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "\nBrowser Console Logs:\n[WARNING] Allow attribute will take precedence over 'allowfullscreen'. (at http://localhost:5173/node_modules/.vite/deps/chunk-WRD5HZVH.js?v=ec87e069:1269:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/d4d834c8-20e1-70f7-159c-4253b7ea4f92/1756178522260345//tmp/test_task/result.webm",
    "created": "2025-08-26T03:19:41.987Z",
    "modified": "2025-08-26T03:22:02.444Z"
  },
  {
    "projectId": "b4a357dc-64df-4802-856d-6ad12681bb73",
    "testId": "11ecde7e-caef-4348-b344-4ad8db31ba04",
    "userId": "d4d834c8-20e1-70f7-159c-4253b7ea4f92",
    "title": "TC015-API Integration - Backend Endpoint Stability and Data Accuracy",
    "description": "Verify RESTful API endpoints respond correctly to valid and invalid requests and enforce security policies.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5173\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "\nBrowser Console Logs:\n[WARNING] Allow attribute will take precedence over 'allowfullscreen'. (at http://localhost:5173/node_modules/.vite/deps/chunk-WRD5HZVH.js?v=ec87e069:1269:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/d4d834c8-20e1-70f7-159c-4253b7ea4f92/1756178519910977//tmp/test_task/result.webm",
    "created": "2025-08-26T03:19:42.036Z",
    "modified": "2025-08-26T03:22:00.148Z"
  },
  {
    "projectId": "b4a357dc-64df-4802-856d-6ad12681bb73",
    "testId": "b0691376-5867-48d3-b82b-ebb2909fd14e",
    "userId": "d4d834c8-20e1-70f7-159c-4253b7ea4f92",
    "title": "TC016-Accessibility Compliance Testing",
    "description": "Validate that the platform meets WCAG 2.1 AA standards ensuring accessibility for users with disabilities.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5173\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        assert False, 'Test plan execution failed: accessibility validation could not be completed.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "\nBrowser Console Logs:\n[WARNING] Allow attribute will take precedence over 'allowfullscreen'. (at http://localhost:5173/node_modules/.vite/deps/chunk-WRD5HZVH.js?v=ec87e069:1269:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/d4d834c8-20e1-70f7-159c-4253b7ea4f92/1756178526246924//tmp/test_task/result.webm",
    "created": "2025-08-26T03:19:42.045Z",
    "modified": "2025-08-26T03:22:06.465Z"
  },
  {
    "projectId": "b4a357dc-64df-4802-856d-6ad12681bb73",
    "testId": "43a0e178-2bd5-4a7f-8222-3ac5504f1c29",
    "userId": "d4d834c8-20e1-70f7-159c-4253b7ea4f92",
    "title": "TC017-Admin Backend - Role Level Security Policy Enforcement",
    "description": "Verify that the database RLS policies restrict data access appropriately based on user roles.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5173\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        assert False, 'Test failed: Expected result unknown, forcing failure.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "\nBrowser Console Logs:\n[WARNING] Allow attribute will take precedence over 'allowfullscreen'. (at http://localhost:5173/node_modules/.vite/deps/chunk-WRD5HZVH.js?v=ec87e069:1269:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/d4d834c8-20e1-70f7-159c-4253b7ea4f92/1756178516667254//tmp/test_task/result.webm",
    "created": "2025-08-26T03:19:42.052Z",
    "modified": "2025-08-26T03:21:56.867Z"
  }
]
